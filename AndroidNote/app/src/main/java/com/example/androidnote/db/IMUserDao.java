package com.example.androidnote.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.androidnote.model.IMUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMUSER".
*/
public class IMUserDao extends AbstractDao<IMUser, Long> {

    public static final String TABLENAME = "IMUSER";

    /**
     * Properties of entity IMUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property Photo = new Property(2, String.class, "photo", false, "PHOTO");
        public final static Property SchoolName = new Property(3, String.class, "schoolName", false, "SCHOOL_NAME");
        public final static Property ClassName = new Property(4, String.class, "className", false, "CLASS_NAME");
        public final static Property Sex = new Property(5, boolean.class, "sex", false, "SEX");
        public final static Property Desc = new Property(6, String.class, "desc", false, "DESC");
        public final static Property Age = new Property(7, int.class, "age", false, "AGE");
        public final static Property Birthday = new Property(8, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Constellation = new Property(9, String.class, "constellation", false, "CONSTELLATION");
        public final static Property Hobby = new Property(10, String.class, "hobby", false, "HOBBY");
    }


    public IMUserDao(DaoConfig config) {
        super(config);
    }
    
    public IMUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMUSER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"PHOTO\" TEXT," + // 2: photo
                "\"SCHOOL_NAME\" TEXT," + // 3: schoolName
                "\"CLASS_NAME\" TEXT," + // 4: className
                "\"SEX\" INTEGER NOT NULL ," + // 5: sex
                "\"DESC\" TEXT," + // 6: desc
                "\"AGE\" INTEGER NOT NULL ," + // 7: age
                "\"BIRTHDAY\" TEXT," + // 8: birthday
                "\"CONSTELLATION\" TEXT," + // 9: constellation
                "\"HOBBY\" TEXT);"); // 10: hobby
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMUSER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IMUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(3, photo);
        }
 
        String schoolName = entity.getSchoolName();
        if (schoolName != null) {
            stmt.bindString(4, schoolName);
        }
 
        String className = entity.getClassName();
        if (className != null) {
            stmt.bindString(5, className);
        }
        stmt.bindLong(6, entity.getSex() ? 1L: 0L);
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(7, desc);
        }
        stmt.bindLong(8, entity.getAge());
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(9, birthday);
        }
 
        String constellation = entity.getConstellation();
        if (constellation != null) {
            stmt.bindString(10, constellation);
        }
 
        String hobby = entity.getHobby();
        if (hobby != null) {
            stmt.bindString(11, hobby);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IMUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(3, photo);
        }
 
        String schoolName = entity.getSchoolName();
        if (schoolName != null) {
            stmt.bindString(4, schoolName);
        }
 
        String className = entity.getClassName();
        if (className != null) {
            stmt.bindString(5, className);
        }
        stmt.bindLong(6, entity.getSex() ? 1L: 0L);
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(7, desc);
        }
        stmt.bindLong(8, entity.getAge());
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(9, birthday);
        }
 
        String constellation = entity.getConstellation();
        if (constellation != null) {
            stmt.bindString(10, constellation);
        }
 
        String hobby = entity.getHobby();
        if (hobby != null) {
            stmt.bindString(11, hobby);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public IMUser readEntity(Cursor cursor, int offset) {
        IMUser entity = new IMUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // photo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // schoolName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // className
            cursor.getShort(offset + 5) != 0, // sex
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // desc
            cursor.getInt(offset + 7), // age
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // birthday
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // constellation
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // hobby
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IMUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhoto(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSchoolName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setClassName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSex(cursor.getShort(offset + 5) != 0);
        entity.setDesc(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAge(cursor.getInt(offset + 7));
        entity.setBirthday(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setConstellation(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setHobby(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IMUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IMUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IMUser entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
