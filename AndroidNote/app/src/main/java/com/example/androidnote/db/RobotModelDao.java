package com.example.androidnote.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.androidnote.model.StringConverter;
import java.util.List;

import com.example.androidnote.model.RobotModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ROBOT_MODEL".
*/
public class RobotModelDao extends AbstractDao<RobotModel, Long> {

    public static final String TABLENAME = "ROBOT_MODEL";

    /**
     * Properties of entity RobotModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RobotId = new Property(1, String.class, "robotId", false, "ROBOT_ID");
        public final static Property OwnerId = new Property(2, String.class, "ownerId", false, "OWNER_ID");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Desc = new Property(4, String.class, "desc", false, "DESC");
        public final static Property ImageUrl = new Property(5, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property BeginSay = new Property(6, String.class, "beginSay", false, "BEGIN_SAY");
        public final static Property Type = new Property(7, String.class, "type", false, "TYPE");
        public final static Property IsDel = new Property(8, boolean.class, "isDel", false, "IS_DEL");
        public final static Property Questions = new Property(9, String.class, "questions", false, "QUESTIONS");
        public final static Property SendTime = new Property(10, long.class, "sendTime", false, "SEND_TIME");
        public final static Property CreateTime = new Property(11, long.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(12, long.class, "updateTime", false, "UPDATE_TIME");
    }

    private final StringConverter questionsConverter = new StringConverter();

    public RobotModelDao(DaoConfig config) {
        super(config);
    }
    
    public RobotModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ROBOT_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ROBOT_ID\" TEXT," + // 1: robotId
                "\"OWNER_ID\" TEXT," + // 2: ownerId
                "\"TITLE\" TEXT," + // 3: title
                "\"DESC\" TEXT," + // 4: desc
                "\"IMAGE_URL\" TEXT," + // 5: imageUrl
                "\"BEGIN_SAY\" TEXT," + // 6: beginSay
                "\"TYPE\" TEXT," + // 7: type
                "\"IS_DEL\" INTEGER NOT NULL ," + // 8: isDel
                "\"QUESTIONS\" TEXT," + // 9: questions
                "\"SEND_TIME\" INTEGER NOT NULL ," + // 10: sendTime
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 11: createTime
                "\"UPDATE_TIME\" INTEGER NOT NULL );"); // 12: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ROBOT_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RobotModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String robotId = entity.getRobotId();
        if (robotId != null) {
            stmt.bindString(2, robotId);
        }
 
        String ownerId = entity.getOwnerId();
        if (ownerId != null) {
            stmt.bindString(3, ownerId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(5, desc);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(6, imageUrl);
        }
 
        String beginSay = entity.getBeginSay();
        if (beginSay != null) {
            stmt.bindString(7, beginSay);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(8, type);
        }
        stmt.bindLong(9, entity.getIsDel() ? 1L: 0L);
 
        List questions = entity.getQuestions();
        if (questions != null) {
            stmt.bindString(10, questionsConverter.convertToDatabaseValue(questions));
        }
        stmt.bindLong(11, entity.getSendTime());
        stmt.bindLong(12, entity.getCreateTime());
        stmt.bindLong(13, entity.getUpdateTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RobotModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String robotId = entity.getRobotId();
        if (robotId != null) {
            stmt.bindString(2, robotId);
        }
 
        String ownerId = entity.getOwnerId();
        if (ownerId != null) {
            stmt.bindString(3, ownerId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(5, desc);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(6, imageUrl);
        }
 
        String beginSay = entity.getBeginSay();
        if (beginSay != null) {
            stmt.bindString(7, beginSay);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(8, type);
        }
        stmt.bindLong(9, entity.getIsDel() ? 1L: 0L);
 
        List questions = entity.getQuestions();
        if (questions != null) {
            stmt.bindString(10, questionsConverter.convertToDatabaseValue(questions));
        }
        stmt.bindLong(11, entity.getSendTime());
        stmt.bindLong(12, entity.getCreateTime());
        stmt.bindLong(13, entity.getUpdateTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RobotModel readEntity(Cursor cursor, int offset) {
        RobotModel entity = new RobotModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // robotId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ownerId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // desc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // imageUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // beginSay
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // type
            cursor.getShort(offset + 8) != 0, // isDel
            cursor.isNull(offset + 9) ? null : questionsConverter.convertToEntityProperty(cursor.getString(offset + 9)), // questions
            cursor.getLong(offset + 10), // sendTime
            cursor.getLong(offset + 11), // createTime
            cursor.getLong(offset + 12) // updateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RobotModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRobotId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOwnerId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDesc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImageUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBeginSay(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsDel(cursor.getShort(offset + 8) != 0);
        entity.setQuestions(cursor.isNull(offset + 9) ? null : questionsConverter.convertToEntityProperty(cursor.getString(offset + 9)));
        entity.setSendTime(cursor.getLong(offset + 10));
        entity.setCreateTime(cursor.getLong(offset + 11));
        entity.setUpdateTime(cursor.getLong(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RobotModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RobotModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RobotModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
