package com.example.androidnote.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.androidnote.model.Session;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SESSION".
*/
public class SessionDao extends AbstractDao<Session, Long> {

    public static final String TABLENAME = "SESSION";

    /**
     * Properties of entity Session.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SessionId = new Property(1, String.class, "sessionId", false, "SESSION_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Desc = new Property(3, String.class, "desc", false, "DESC");
        public final static Property RobotId = new Property(4, String.class, "robotId", false, "ROBOT_ID");
        public final static Property UserId = new Property(5, String.class, "userId", false, "USER_ID");
        public final static Property Url = new Property(6, String.class, "url", false, "URL");
        public final static Property IsDel = new Property(7, boolean.class, "isDel", false, "IS_DEL");
    }


    public SessionDao(DaoConfig config) {
        super(config);
    }
    
    public SessionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SESSION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SESSION_ID\" TEXT NOT NULL ," + // 1: sessionId
                "\"NAME\" TEXT NOT NULL ," + // 2: name
                "\"DESC\" TEXT NOT NULL ," + // 3: desc
                "\"ROBOT_ID\" TEXT NOT NULL ," + // 4: robotId
                "\"USER_ID\" TEXT NOT NULL ," + // 5: userId
                "\"URL\" TEXT NOT NULL ," + // 6: url
                "\"IS_DEL\" INTEGER NOT NULL );"); // 7: isDel
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SESSION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Session entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getSessionId());
        stmt.bindString(3, entity.getName());
        stmt.bindString(4, entity.getDesc());
        stmt.bindString(5, entity.getRobotId());
        stmt.bindString(6, entity.getUserId());
        stmt.bindString(7, entity.getUrl());
        stmt.bindLong(8, entity.getIsDel() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Session entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getSessionId());
        stmt.bindString(3, entity.getName());
        stmt.bindString(4, entity.getDesc());
        stmt.bindString(5, entity.getRobotId());
        stmt.bindString(6, entity.getUserId());
        stmt.bindString(7, entity.getUrl());
        stmt.bindLong(8, entity.getIsDel() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Session readEntity(Cursor cursor, int offset) {
        Session entity = new Session( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // sessionId
            cursor.getString(offset + 2), // name
            cursor.getString(offset + 3), // desc
            cursor.getString(offset + 4), // robotId
            cursor.getString(offset + 5), // userId
            cursor.getString(offset + 6), // url
            cursor.getShort(offset + 7) != 0 // isDel
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Session entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSessionId(cursor.getString(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setDesc(cursor.getString(offset + 3));
        entity.setRobotId(cursor.getString(offset + 4));
        entity.setUserId(cursor.getString(offset + 5));
        entity.setUrl(cursor.getString(offset + 6));
        entity.setIsDel(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Session entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Session entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Session entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
