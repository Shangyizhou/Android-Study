package com.example.androidnote.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.androidnote.model.ResponseInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RESPONSE_INFO".
*/
public class ResponseInfoDao extends AbstractDao<ResponseInfo, Long> {

    public static final String TABLENAME = "RESPONSE_INFO";

    /**
     * Properties of entity ResponseInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RequestId = new Property(1, String.class, "requestId", false, "REQUEST_ID");
        public final static Property RequestTime = new Property(2, long.class, "requestTime", false, "REQUEST_TIME");
        public final static Property ResponseTime = new Property(3, long.class, "responseTime", false, "RESPONSE_TIME");
        public final static Property UserId = new Property(4, String.class, "userId", false, "USER_ID");
        public final static Property CostToken = new Property(5, long.class, "costToken", false, "COST_TOKEN");
    }


    public ResponseInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ResponseInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RESPONSE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"REQUEST_ID\" TEXT NOT NULL ," + // 1: requestId
                "\"REQUEST_TIME\" INTEGER NOT NULL ," + // 2: requestTime
                "\"RESPONSE_TIME\" INTEGER NOT NULL ," + // 3: responseTime
                "\"USER_ID\" TEXT NOT NULL ," + // 4: userId
                "\"COST_TOKEN\" INTEGER NOT NULL );"); // 5: costToken
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RESPONSE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ResponseInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getRequestId());
        stmt.bindLong(3, entity.getRequestTime());
        stmt.bindLong(4, entity.getResponseTime());
        stmt.bindString(5, entity.getUserId());
        stmt.bindLong(6, entity.getCostToken());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ResponseInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getRequestId());
        stmt.bindLong(3, entity.getRequestTime());
        stmt.bindLong(4, entity.getResponseTime());
        stmt.bindString(5, entity.getUserId());
        stmt.bindLong(6, entity.getCostToken());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ResponseInfo readEntity(Cursor cursor, int offset) {
        ResponseInfo entity = new ResponseInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // requestId
            cursor.getLong(offset + 2), // requestTime
            cursor.getLong(offset + 3), // responseTime
            cursor.getString(offset + 4), // userId
            cursor.getLong(offset + 5) // costToken
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ResponseInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRequestId(cursor.getString(offset + 1));
        entity.setRequestTime(cursor.getLong(offset + 2));
        entity.setResponseTime(cursor.getLong(offset + 3));
        entity.setUserId(cursor.getString(offset + 4));
        entity.setCostToken(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ResponseInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ResponseInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ResponseInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
