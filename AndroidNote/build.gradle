// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        google()
        mavenCentral()
        maven { url "https://jitpack.io" }
        maven { url "https://maven.aliyun.com/nexus/content/repositories/gradle-plugin"}
    }
    dependencies {
        classpath 'org.greenrobot:greendao-gradle-plugin:3.3.1' // add plugin
    }
}

//dependencies和plugins都是定义Gradle构建配置的重要组成部分，用于指定项目需要的插件和依赖库，但它们之间存在一些区别。
//依赖（dependencies）：这是你的项目依赖的外部库，例如Android的各种库，或者你从其他地方下载的.jar文件等。这些库拥有你项目中需使用的一些类和方法。依赖被分为几个不同的类型，例如implementation, api, compileOnly, runtimeOnly, 等等。
//插件（plugins）：这是扩展Gradle构建功能的一种方法。插件可以改变构建的过程，将新的任务添加到构建过程中，甚至修改或增加到已有任务的行为。例如，Android插件添加了一个名为assembleDebug的任务，你可以使用它来构建和打包你的Android应用。插件通常在项目的build.gradle文件中通过 plugins DSL或通过旧的 apply plugin: 方法来应用。
//重要的是要理解这两者之间的区别：dependencies 用于你的代码中需要使用的库，而 plugins 用于改变你的构建过程。例如，Android Gradle 插件就是一种 plugins，它修改了构建过程，添加了用于Android应用程序的打包和测试的任务和配置。同时，你的Android项目可能在 dependencies中指定了例如 appcompat, constraint-layout等Android框架和第三方库。

plugins {
    id 'com.android.application' version '8.1.3' apply false
    id 'com.android.library' version '8.1.3' apply false
}

apply from: "config.gradle"

// 迁移到新版本的 allprojects 部分
allprojects {
    repositories {
        google()
        mavenCentral()
        maven { url rootProject.ext.maven["jitpack"] }
        maven { url rootProject.ext.maven["aliyun_jcenter"] }
        maven { url rootProject.ext.maven["aliyun_google"] }
        maven { url rootProject.ext.maven["aliyun_public"] }
        maven { url rootProject.ext.maven["bmobUrl"] }
    }
}